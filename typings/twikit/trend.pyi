"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, TypedDict

from .client.client import Client

if TYPE_CHECKING: ...

class Trend:
    """
    Attributes
    ----------
    name : :class:`str`
        The name of the trending topic.
    tweets_count : :class:`int`
        The count of tweets associated with the trend.
    domain_context : :class:`str`
        The context or domain associated with the trend.
    grouped_trends : :class:`list`[:class:`str`]
        A list of trend names grouped under the main trend.
    """
    def __init__(self, client: Client, data: dict) -> None: ...
    def __repr__(self) -> str: ...

class PlaceTrends(TypedDict):
    trends: list[PlaceTrend]
    as_of: str
    created_at: str
    locations: dict
    ...

class PlaceTrend:
    """
    Attributes
    ----------
    name : :class:`str`
        The name of the trend.
    url : :class:`str`
        The URL to view the trend.
    query : :class:`str`
        The search query corresponding to the trend.
    tweet_volume : :class:`int`
        The volume of tweets associated with the trend.
    """
    def __init__(self, client: Client, data: dict) -> None: ...
    def __repr__(self) -> str: ...

class Location:
    def __init__(self, client: Client, data: dict) -> None: ...
    async def get_trends(self) -> PlaceTrends: ...
    def __repr__(self) -> str: ...
    def __eq__(self, __value: object) -> bool: ...
    def __ne__(self, __value: object) -> bool: ...
