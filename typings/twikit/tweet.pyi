"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from typing import TYPE_CHECKING

from httpx import Response

from .client.client import Client
from .geo import Place
from .media import MEDIA_TYPE
from .user import User
from .utils import Result

if TYPE_CHECKING: ...

class Tweet:
    """
    Attributes
    ----------
    id : :class:`str`
        The unique identifier of the tweet.
    created_at : :class:`str`
        The date and time when the tweet was created.
    created_at_datetime : :class:`datetime`
        The created_at converted to datetime.
    user: :class:`User`
        Author of the tweet.
    text : :class:`str`
        The full text of the tweet.
    lang : :class:`str`
        The language of the tweet.
    in_reply_to : :class:`str`
        The tweet ID this tweet is in reply to, if any
    is_quote_status : :class:`bool`
        Indicates if the tweet is a quote status.
    quote : :class:`Tweet` | None
        The Tweet being quoted (if any)
    retweeted_tweet : :class:`Tweet` | None
        The Tweet being retweeted (if any)
    possibly_sensitive : :class:`bool`
        Indicates if the tweet content may be sensitive.
    possibly_sensitive_editable : :class:`bool`
        Indicates if the tweet's sensitivity can be edited.
    quote_count : :class:`int`
        The count of quotes for the tweet.
    media : list[:class:`.media.Photo` | :class:`.media.AnimatedGif` | :class:`.media.Video`]
        A list of media entities associated with the tweet.
        https://github.com/d60/twikit/blob/main/examples/download_tweet_media.py
    reply_count : :class:`int`
        The count of replies to the tweet.
    favorite_count : :class:`int`
        The count of favorites or likes for the tweet.
    favorited : :class:`bool`
        Indicates if the tweet is favorited.
    view_count: :class:`int` | None
        The count of views.
    view_count_state : :class:`str` | None
        The state of the tweet views.
    retweet_count : :class:`int`
        The count of retweets for the tweet.
    bookmark_count : :class:`int`
        The count of bookmarks for the tweet.
    bookmarked : :class:`bool`
        Indicates if the tweet is bookmarked.
    place : :class:`.Place` | None
        The location associated with the tweet.
    editable_until_msecs : :class:`int`
        The timestamp until which the tweet is editable.
    is_translatable : :class:`bool`
        Indicates if the tweet is translatable.
    is_edit_eligible : :class:`bool`
        Indicates if the tweet is eligible for editing.
    edits_remaining : :class:`int`
        The remaining number of edits allowed for the tweet.
    replies: Result[:class:`Tweet`] | None
        Replies to the tweet.
    reply_to: list[:class:`Tweet`] | None
        A list of Tweet objects representing the tweets to which to reply.
    related_tweets : list[:class:`Tweet`] | None
        Related tweets.
    hashtags: list[:class:`str`]
        Hashtags included in the tweet text.
    has_card : :class:`bool`
        Indicates if the tweet contains a card.
    thumbnail_title : :class:`str` | None
        The title of the webpage displayed inside tweet's card.
    thumbnail_url : :class:`str` | None
        Link to the image displayed in the tweet's card.
    urls : :class:`list`
        Information about URLs contained in the tweet.
    full_text : :class:`str` | None
        The full text of the tweet.
    """
    def __init__(self, client: Client, data: dict, user: User = ...) -> None: ...
    @property
    def id(self) -> str: ...
    @property
    def created_at(self) -> str: ...
    @property
    def text(self) -> str: ...
    @property
    def lang(self) -> str: ...
    @property
    def in_reply_to(self) -> str | None: ...
    @property
    def is_quote_status(self) -> bool: ...
    @property
    def possibly_sensitive(self) -> bool: ...
    @property
    def possibly_sensitive_editable(self) -> bool: ...
    @property
    def quote_count(self) -> int: ...
    @property
    def reply_count(self) -> int: ...
    @property
    def favorite_count(self) -> int: ...
    @property
    def favorited(self) -> bool: ...
    @property
    def retweet_count(self) -> int: ...
    @property
    def bookmark_count(self) -> int: ...
    @property
    def bookmarked(self) -> bool: ...
    @property
    def editable_until_msecs(self) -> int: ...
    @property
    def is_translatable(self) -> bool: ...
    @property
    def is_edit_eligible(self) -> bool: ...
    @property
    def edits_remaining(self) -> int: ...
    @property
    def view_count(self) -> int | None: ...
    @property
    def view_count_state(self) -> str | None: ...
    @property
    def has_community_notes(self) -> bool: ...
    @property
    def quote(self) -> Tweet | None: ...
    @property
    def retweeted_tweet(self) -> Tweet | None: ...
    @property
    def full_text(self) -> str: ...
    @property
    def hashtags(self) -> list[str]: ...
    @property
    def urls(self) -> list[str]: ...
    @property
    def community_note(self) -> dict | None: ...
    @property
    def has_card(self) -> bool: ...
    @property
    def thumbnail_title(self) -> str | None: ...
    @property
    def thumbnail_url(self) -> str | None: ...
    @property
    def created_at_datetime(self) -> datetime: ...
    @property
    def poll(self) -> Poll: ...
    @property
    def place(self) -> Place: ...
    @property
    def media(self) -> list[MEDIA_TYPE]: ...
    async def delete(self) -> Response:
        """Deletes the tweet.

        Returns
        -------
        :class:`httpx.Response`
            Response returned from twitter api.

        Examples
        --------
        >>> await tweet.delete()
        """
        ...

    async def favorite(self) -> Response:
        """
        Favorites the tweet.

        Returns
        -------
        :class:`httpx.Response`
            Response returned from twitter api.

        See Also
        --------
        Client.favorite_tweet
        """
        ...

    async def unfavorite(self) -> Response:
        """
        Favorites the tweet.

        Returns
        -------
        :class:`httpx.Response`
            Response returned from twitter api.

        See Also
        --------
        Client.unfavorite_tweet
        """
        ...

    async def retweet(self) -> Response:
        """
        Retweets the tweet.

        Returns
        -------
        :class:`httpx.Response`
            Response returned from twitter api.

        See Also
        --------
        Client.retweet
        """
        ...

    async def delete_retweet(self) -> Response:
        """
        Deletes the retweet.

        Returns
        -------
        :class:`httpx.Response`
            Response returned from twitter api.

        See Also
        --------
        Client.delete_retweet
        """
        ...

    async def bookmark(self) -> Response:
        """
        Adds the tweet to bookmarks.

        Returns
        -------
        :class:`httpx.Response`
            Response returned from twitter api.

        See Also
        --------
        Client.bookmark_tweet
        """
        ...

    async def delete_bookmark(self) -> Response:
        """
        Removes the tweet from bookmarks.

        Returns
        -------
        :class:`httpx.Response`
            Response returned from twitter api.

        See Also
        --------
        Client.delete_bookmark
        """
        ...

    async def reply(
        self, text: str = ..., media_ids: list[str] | None = ..., **kwargs
    ) -> Tweet:
        """
        Replies to the tweet.

        Parameters
        ----------
        text : :class:`str`, default=''
            The text content of the reply.
        media_ids : list[:class:`str`], default=None
            A list of media IDs or URIs to attach to the reply.
            Media IDs can be obtained by using the `upload_media` method.

        Returns
        -------
        :class:`Tweet`
            The created tweet.

        Examples
        --------
        >>> tweet_text = 'Example text'
        >>> media_ids = [
        ...     client.upload_media('image1.png'),
        ...     client.upload_media('image2.png')
        ... ]
        >>> await tweet.reply(
        ...     tweet_text,
        ...     media_ids=media_ids
        ... )

        See Also
        --------
        `Client.upload_media`
        """
        ...

    async def get_retweeters(
        self, count: str = ..., cursor: str | None = ...
    ) -> Result[User]:
        """
        Retrieve users who retweeted the tweet.

        Parameters
        ----------
        count : :class:`int`, default=40
            The maximum number of users to retrieve.
        cursor : :class:`str`, default=None
            A string indicating the position of the cursor for pagination.

        Returns
        -------
        Result[:class:`User`]
            A list of users who retweeted the tweet.

        Examples
        --------
        >>> tweet_id = '...'
        >>> retweeters = tweet.get_retweeters()
        >>> print(retweeters)
        [<User id="...">, <User id="...">, ..., <User id="...">]

        >>> more_retweeters = retweeters.next()  # Retrieve more retweeters.
        >>> print(more_retweeters)
        [<User id="...">, <User id="...">, ..., <User id="...">]
        """
        ...

    async def get_favoriters(
        self, count: str = ..., cursor: str | None = ...
    ) -> Result[User]:
        """
        Retrieve users who favorited a specific tweet.

        Parameters
        ----------
        tweet_id : :class:`str`
            The ID of the tweet.
        count : :class:`int`, default=40
            The maximum number of users to retrieve.
        cursor : :class:`str`, default=None
            A string indicating the position of the cursor for pagination.

        Returns
        -------
        Result[:class:`User`]
            A list of users who favorited the tweet.

        Examples
        --------
        >>> tweet_id = '...'
        >>> favoriters = tweet.get_favoriters()
        >>> print(favoriters)
        [<User id="...">, <User id="...">, ..., <User id="...">]

        >>> more_favoriters = favoriters.next()  # Retrieve more favoriters.
        >>> print(more_favoriters)
        [<User id="...">, <User id="...">, ..., <User id="...">]
        """
        ...

    async def get_similar_tweets(self) -> list[Tweet]:
        """
        Retrieves tweets similar to the tweet (Twitter premium only).

        Returns
        -------
        list[:class:`Tweet`]
            A list of Tweet objects representing tweets
            similar to the tweet.
        """
        ...

    async def update(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, __value: object) -> bool: ...
    def __ne__(self, __value: object) -> bool: ...

def tweet_from_data(client: Client, data: dict) -> Tweet:
    ":meta private:"
    ...

class ScheduledTweet:
    def __init__(self, client: Client, data: dict) -> None: ...
    async def delete(self) -> Response:
        """
        Delete the scheduled tweet.

        Returns
        -------
        :class:`httpx.Response`
            Response returned from twitter api.
        """
        ...

    def __repr__(self) -> str: ...

class TweetTombstone:
    def __init__(self, client: Client, tweet_id: str, data: dict) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, __value: object) -> bool: ...
    def __ne__(self, __value: object) -> bool: ...

class Poll:
    """Represents a poll associated with a tweet.
    Attributes
    ----------
    tweet : :class:`Tweet`
        The tweet associated with the poll.
    id : :class:`str`
        The unique identifier of the poll.
    name : :class:`str`
        The name of the poll.
    choices : list[:class:`dict`]
        A list containing dictionaries representing poll choices.
        Each dictionary contains 'label' and 'count' keys
        for choice label and count.
    duration_minutes : :class:`int`
        The duration of the poll in minutes.
    end_datetime_utc : :class:`str`
        The end date and time of the poll in UTC format.
    last_updated_datetime_utc : :class:`str`
        The last updated date and time of the poll in UTC format.
    selected_choice : :class:`str` | None
        Number of the selected choice.
    """
    def __init__(
        self, client: Client, data: dict, tweet: Tweet | None = ...
    ) -> None: ...
    async def vote(self, selected_choice: str) -> Poll:
        """
        Vote on the poll with the specified selected choice.
        Parameters
        ----------
        selected_choice : :class:`str`
            The label of the selected choice for the vote.
        Returns
        -------
        :class:`Poll`
            The Poll object representing the updated poll after voting.
        """
        ...

    def __repr__(self) -> str: ...
    def __eq__(self, __value: object) -> bool: ...
    def __ne__(self, __value: object) -> bool: ...

class CommunityNote:
    """Represents a community note.

    Attributes
    ----------
    id : :class:`str`
        The ID of the community note.
    text : :class:`str`
        The text content of the community note.
    misleading_tags : list[:class:`str`]
        A list of tags indicating misleading information.
    trustworthy_sources : :class:`bool`
        Indicates if the sources are trustworthy.
    helpful_tags : list[:class:`str`]
        A list of tags indicating helpful information.
    created_at : :class:`int`
        The timestamp when the note was created.
    can_appeal : :class:`bool`
        Indicates if the note can be appealed.
    appeal_status : :class:`str`
        The status of the appeal.
    is_media_note : :class:`bool`
        Indicates if the note is related to media content.
    media_note_matches : :class:`str`
        Matches related to media content.
    birdwatch_profile : :class:`dict`
        Birdwatch profile associated with the note.
    tweet_id : :class:`str`
        The ID of the tweet associated with the note.
    """
    def __init__(self, client: Client, data: dict) -> None: ...
    async def update(self) -> None: ...
    def __repr__(self) -> str: ...
    def __eq__(self, __value: object) -> bool: ...
    def __ne__(self, __value: object) -> bool: ...
