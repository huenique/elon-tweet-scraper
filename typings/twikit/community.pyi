"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, Literal, NamedTuple

from .client.client import Client
from .tweet import Tweet
from .utils import Result

if TYPE_CHECKING: ...

class CommunityCreator(NamedTuple):
    id: str
    screen_name: str
    verified: bool
    ...

class CommunityRule(NamedTuple):
    id: str
    name: str
    ...

class CommunityMember:
    def __init__(self, client: Client, data: dict) -> None: ...
    def __eq__(self, __value: object) -> bool: ...
    def __ne__(self, __value: object) -> bool: ...
    def __repr__(self) -> str: ...

class Community:
    """
    Attributes
    ----------
    id : :class:`str`
        The ID of the community.
    name : :class:`str`
        The name of the community.
    member_count : :class:`int`
        The count of members in the community.
    is_nsfw : :class:`bool`
        Indicates if the community is NSFW.
    members_facepile_results : list[:class:`str`]
        The profile image URLs of members.
    banner : :class:`dict`
        The banner information of the community.
    is_member : :class:`bool`
        Indicates if the user is a member of the community.
    role : :class:`str`
        The role of the user in the community.
    description : :class:`str`
        The description of the community.
    creator : :class:`User` | :class:`CommunityCreator`
        The creator of the community.
    admin : :class:`User`
        The admin of the community.
    join_policy : :class:`str`
        The join policy of the community.
    created_at : :class:`int`
        The timestamp of the community's creation.
    invites_policy : :class:`str`
        The invites policy of the community.
    is_pinned : :class:`bool`
        Indicates if the community is pinned.
    rules : list[:class:`CommunityRule`]
        The rules of the community.
    """
    def __init__(self, client: Client, data: dict) -> None: ...
    async def get_tweets(
        self,
        tweet_type: Literal["Top", "Latest", "Media"],
        count: int = ...,
        cursor: str | None = ...,
    ) -> Result[Tweet]:
        """
        Retrieves tweets from the community.

        Parameters
        ----------
        tweet_type : {'Top', 'Latest', 'Media'}
            The type of tweets to retrieve.
        count : :class:`int`, default=40
            The number of tweets to retrieve.

        Returns
        -------
        Result[:class:`Tweet`]
            List of retrieved tweets.

        Examples
        --------
        >>> tweets = await community.get_tweets('Latest')
        >>> for tweet in tweets:
        ...     print(tweet)
        <Tweet id="...">
        <Tweet id="...">
        ...
        >>> more_tweets = await tweets.next()  # Retrieve more tweets
        """
        ...

    async def join(self) -> Community:
        """
        Join the community.
        """
        ...

    async def leave(self) -> Community:
        """
        Leave the community.
        """
        ...

    async def request_to_join(self, answer: str | None = ...) -> Community:
        """
        Request to join the community.
        """
        ...

    async def get_members(
        self, count: int = ..., cursor: str | None = ...
    ) -> Result[CommunityMember]:
        """
        Retrieves members of the community.

        Parameters
        ----------
        count : :class:`int`, default=20
            The number of members to retrieve.

        Returns
        -------
        Result[:class:`CommunityMember`]
            List of retrieved members.
        """
        ...

    async def get_moderators(
        self, count: int = ..., cursor: str | None = ...
    ) -> Result[CommunityMember]:
        """
        Retrieves moderators of the community.

        Parameters
        ----------
        count : :class:`int`, default=20
            The number of moderators to retrieve.

        Returns
        -------
        Result[:class:`CommunityMember`]
            List of retrieved moderators.
        """
        ...

    async def search_tweet(
        self, query: str, count: int = ..., cursor: str | None = ...
    ) -> Result[Tweet]:
        """Searchs tweets in the community.

        Parameters
        ----------
        query : :class:`str`
            The search query.
        count : :class:`int`, default=20
            The number of tweets to retrieve.

        Returns
        -------
        Result[:class:`Tweet`]
            List of retrieved tweets.
        """
        ...

    async def update(self) -> None: ...
    def __eq__(self, __value: object) -> bool: ...
    def __ne__(self, __value: object) -> bool: ...
    def __repr__(self) -> str: ...
