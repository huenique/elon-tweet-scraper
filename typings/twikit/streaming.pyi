"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING, AsyncGenerator, NamedTuple

from .client.client import Client

if TYPE_CHECKING: ...

class StreamingSession:
    """
    Represents a streaming session.

    Attributes
    ----------
    id : :class:`str`
        The ID or the session.
    topics : set[:class:`str`]
        The topics to stream.

    See Also
    --------
    .Client.get_streaming_session
    """
    def __init__(
        self,
        client: Client,
        session_id: str,
        stream: AsyncGenerator[Payload],
        topics: set[str],
        auto_reconnect: bool,
    ) -> None: ...
    async def reconnect(self) -> tuple[str, Payload]:
        """
        Reconnects the session.
        """
        ...

    async def update_subscriptions(
        self, subscribe: set[str] | None = ..., unsubscribe: set[str] | None = ...
    ) -> Payload:
        """
        Updates subscriptions for the session.

        Parameters
        ----------
        subscribe : set[:class:`str`], default=None
            Topics to subscribe to.
        unsubscribe : set[:class:`str`], default=None
            Topics to unsubscribe from.

        Examples
        --------
        >>> from twikit.streaming import Topic
        ...
        >>> subscribe_topics = {
        ...     Topic.tweet_engagement('1749528513'),
        ...     Topic.tweet_engagement('1765829534')
        ... }
        >>> unsubscribe_topics = {
        ...     Topic.tweet_engagement('17396176529'),
        ...     Topic.dm_update('17544932482-174455537996'),
        ...     Topic.dm_typing('17544932482-174455537996)'
        ... }
        >>> await session.update_subscriptions(
        ...     subscribe_topics, unsubscribe_topics
        ... )

        Note
        ----
        dm_update and dm_update cannot be added.

        See Also
        --------
        .Topic
        """
        ...

    async def __aiter__(self) -> AsyncGenerator[tuple[str, Payload]]: ...
    def __repr__(self) -> str: ...

class Payload(NamedTuple):
    """
    Represents a payload containing several types of events.
    """

    config: ConfigEvent | None = ...
    subscriptions: SubscriptionsEvent | None = ...
    tweet_engagement: TweetEngagementEvent | None = ...
    dm_update: DMUpdateEvent | None = ...
    dm_typing: DMTypingEvent | None = ...
    def __repr__(self) -> str: ...

class ConfigEvent(NamedTuple):
    """
    Event representing configuration data.
    """

    session_id: str
    subscription_ttl_millis: int
    heartbeat_millis: int
    ...

class SubscriptionsEvent(NamedTuple):
    """
    Event representing subscription status.
    """

    errors: list
    ...

class TweetEngagementEvent(NamedTuple):
    """
    Event representing tweet engagement metrics.
    """

    like_count: str | None
    retweet_count: str | None
    view_count: str | None
    view_count_state: str | None
    quote_count: int | None
    reply_count: int | None
    ...

class DMUpdateEvent(NamedTuple):
    """
    Event representing a (DM) update.
    """

    conversation_id: str
    user_id: str
    ...

class DMTypingEvent(NamedTuple):
    """
    Event representing typing indication in a DM conversation.
    """

    conversation_id: str
    user_id: str
    ...

StreamEventType = (
    ConfigEvent
    | SubscriptionsEvent
    | TweetEngagementEvent
    | DMTypingEvent
    | DMTypingEvent
)

class Topic:
    """
    Utility class for generating topic strings for streaming.
    """
    @staticmethod
    def tweet_engagement(tweet_id: str) -> str:
        """
        Generates a topic string for tweet engagement events.

        Parameters
        ----------
        tweet_id : :class:`str`
            The ID of the tweet.

        Returns
        -------
        :class:`str`
            The topic string for tweet engagement events.
        """
        ...

    @staticmethod
    def dm_update(conversation_id: str) -> str:
        """
        Generates a topic string for direct message update events.

        Parameters
        ----------
        conversation_id : :class:`str`
            The ID of the conversation.
            Group ID (00000000) or partner_ID-your_ID (00000000-00000001)

        Returns
        -------
        :class:`str`
            The topic string for direct message update events.
        """
        ...

    @staticmethod
    def dm_typing(conversation_id: str) -> str:
        """
        Generates a topic string for direct message typing events.

        Parameters
        ----------
        conversation_id : :class:`str`
            The ID of the conversation.
            Group ID (00000000) or partner_ID-your_ID (00000000-00000001)

        Returns
        -------
        :class:`str`
            The topic string for direct message typing events.
        """
        ...
