"""
This type stub file was generated by pyright.
"""

from typing import Any, Literal

from httpx import Response

from ..utils import Result
from .tweet import Tweet
from .user import User

def tweet_from_data(client: GuestClient, data: dict) -> Tweet:
    ":meta private:"
    ...

class GuestClient:
    """
    A client for interacting with the Twitter API as a guest.
    This class is used for interacting with the Twitter API
    without requiring authentication.

    Parameters
    ----------
    language : :class:`str` | None, default=None
        The language code to use in API requests.
    proxy : :class:`str` | None, default=None
        The proxy server URL to use for request
        (e.g., 'http://0.0.0.0:0000').

    Examples
    --------
    >>> client = GuestClient()
    >>> await client.activate()  # Activate the client by generating a guest token.
    """
    def __init__(
        self, language: str = ..., proxy: str | None = ..., **kwargs
    ) -> None: ...
    async def request(
        self, method: str, url: str, raise_exception: bool = ..., **kwargs
    ) -> tuple[dict | Any, Response]:
        ":meta private:"
        ...

    async def get(self, url, **kwargs) -> tuple[dict | Any, Response]:
        ":meta private:"
        ...

    async def post(self, url, **kwargs) -> tuple[dict | Any, Response]:
        ":meta private:"
        ...

    @property
    def proxy(self) -> str:
        ":meta private:"
        ...

    @proxy.setter
    def proxy(self, url: str) -> None: ...
    async def activate(self) -> str:
        """
        Activate the client by generating a guest token.
        """
        ...

    async def get_user_by_screen_name(self, screen_name: str) -> User:
        """
        Retrieves a user object based on the provided screen name.

        Parameters
        ----------
        screen_name : :class:`str`
            The screen name of the user to retrieve.

        Returns
        -------
        :class:`.user.User`
            An instance of the `User` class containing user details.

        Examples
        --------
        >>> user = await client.get_user_by_screen_name('example_user')
        >>> print(user)
        <User id="...">
        """
        ...

    async def get_user_by_id(self, user_id: str) -> User:
        """
        Retrieves a user object based on the provided user ID.

        Parameters
        ----------
        user_id : :class:`str`
            The ID of the user to retrieve.

        Returns
        -------
        :class:`.user.User`
            An instance of the `User` class

        Examples
        --------
        >>> user = await client.get_user_by_id('123456789')
        >>> print(user)
        <User id="123456789">
        """
        ...

    async def get_user_tweets(
        self, user_id: str, tweet_type: Literal["Tweets"] = ..., count: int = ...
    ) -> list[Tweet]:
        """
        Fetches tweets from a specific user's timeline.

        Parameters
        ----------
        user_id : :class:`str`
            The ID of the Twitter user whose tweets to retrieve.
            To get the user id from the screen name, you can use
            `get_user_by_screen_name` method.
        tweet_type : {'Tweets'}, default='Tweets'
            The type of tweets to retrieve.
        count : :class:`int`, default=40
            The number of tweets to retrieve.

        Returns
        -------
        list[:class:`.tweet.Tweet`]
            A Result object containing a list of `Tweet` objects.

        Examples
        --------
        >>> user_id = '...'

        If you only have the screen name, you can get the user id as follows:

        >>> screen_name = 'example_user'
        >>> user = client.get_user_by_screen_name(screen_name)
        >>> user_id = user.id

        >>> tweets = await client.get_user_tweets(user_id)
        >>> for tweet in tweets:
        ...    print(tweet)
        <Tweet id="...">
        <Tweet id="...">
        ...
        ...

        See Also
        --------
        .get_user_by_screen_name
        """
        ...

    async def get_tweet_by_id(self, tweet_id: str) -> Tweet:
        """
        Fetches a tweet by tweet ID.

        Parameters
        ----------
        tweet_id : :class:`str`
            The ID of the tweet.

        Returns
        -------
        :class:`.tweet.Tweet`
            Tweet object

        Examples
        --------
        >>> await client.get_tweet_by_id('123456789')
        <Tweet id="123456789">
        """
        ...

    async def get_user_highlights_tweets(
        self, user_id: str, count: int = ..., cursor: str | None = ...
    ) -> Result[Tweet]:
        """
        Retrieves highlighted tweets from a user's timeline.

        Parameters
        ----------
        user_id : :class:`str`
            The user ID
        count : :class:`int`, default=20
            The number of tweets to retrieve.

        Returns
        -------
        Result[:class:`.tweet.Tweet`]
            An instance of the `Result` class containing the highlighted tweets.

        Examples
        --------
        >>> result = await client.get_user_highlights_tweets('123456789')
        >>> for tweet in result:
        ...     print(tweet)
        <Tweet id="...">
        <Tweet id="...">
        ...
        ...

        >>> more_results = await result.next()  # Retrieve more highlighted tweets
        >>> for tweet in more_results:
        ...     print(tweet)
        <Tweet id="...">
        <Tweet id="...">
        ...
        ...
        """
        ...
