"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING

from ..guest.client import GuestClient
from .client import Client

if TYPE_CHECKING:
    ClientType = Client | GuestClient

class Endpoint:
    @staticmethod
    def url(path):  # -> str:
        ...

    SEARCH_TIMELINE = ...
    SIMILAR_POSTS = ...
    CREATE_NOTE_TWEET = ...
    CREATE_TWEET = ...
    CREATE_SCHEDULED_TWEET = ...
    DELETE_TWEET = ...
    USER_BY_SCREEN_NAME = ...
    USER_BY_REST_ID = ...
    TWEET_DETAIL = ...
    TWEET_RESULT_BY_REST_ID = ...
    FETCH_SCHEDULED_TWEETS = ...
    DELETE_SCHEDULED_TWEET = ...
    RETWEETERS = ...
    FAVORITERS = ...
    FETCH_COMMUNITY_NOTE = ...
    USER_TWEETS = ...
    USER_TWEETS_AND_REPLIES = ...
    USER_MEDIA = ...
    USER_LIKES = ...
    USER_HIGHLIGHTS_TWEETS = ...
    HOME_TIMELINE = ...
    HOME_LATEST_TIMELINE = ...
    FAVORITE_TWEET = ...
    UNFAVORITE_TWEET = ...
    CREATE_RETWEET = ...
    DELETE_RETWEET = ...
    CREATE_BOOKMARK = ...
    BOOKMARK_TO_FOLDER = ...
    DELETE_BOOKMARK = ...
    BOOKMARKS = ...
    BOOKMARK_FOLDER_TIMELINE = ...
    BOOKMARKS_ALL_DELETE = ...
    BOOKMARK_FOLDERS_SLICE = ...
    EDIT_BOOKMARK_FOLDER = ...
    DELETE_BOOKMARK_FOLDER = ...
    CREATE_BOOKMARK_FOLDER = ...
    FOLLOWERS = ...
    BLUE_VERIFIED_FOLLOWERS = ...
    FOLLOWERS_YOU_KNOW = ...
    FOLLOWING = ...
    USER_CREATOR_SUBSCRIPTIONS = ...
    USER_DM_REACTION_MUTATION_ADD_MUTATION = ...
    USER_DM_REACTION_MUTATION_REMOVE_MUTATION = ...
    DM_MESSAGE_DELETE_MUTATION = ...
    ADD_PARTICIPANTS_MUTATION = ...
    CREATE_LIST = ...
    EDIT_LIST_BANNER = ...
    DELETE_LIST_BANNER = ...
    UPDATE_LIST = ...
    LIST_ADD_MEMBER = ...
    LIST_REMOVE_MEMBER = ...
    LIST_MANAGEMENT_PACE_TIMELINE = ...
    LIST_BY_REST_ID = ...
    LIST_LATEST_TWEETS_TIMELINE = ...
    LIST_MEMBERS = ...
    LIST_SUBSCRIBERS = ...
    SEARCH_COMMUNITY = ...
    COMMUNITY_QUERY = ...
    COMMUNITY_MEDIA_TIMELINE = ...
    COMMUNITY_TWEETS_TIMELINE = ...
    COMMUNITIES_MAIN_PAGE_TIMELINE = ...
    JOIN_COMMUNITY = ...
    LEAVE_COMMUNITY = ...
    REQUEST_TO_JOIN_COMMUNITY = ...
    MEMBERS_SLICE_TIMELINE_QUERY = ...
    MODERATORS_SLICE_TIMELINE_QUERY = ...
    COMMUNITY_TWEET_SEARCH_MODULE_QUERY = ...
    TWEET_RESULTS_BY_REST_IDS = ...

class GQLClient:
    def __init__(self, base: ClientType) -> None: ...
    async def gql_get(
        self,
        url: str,
        variables: dict,
        features: dict | None = ...,
        headers: dict | None = ...,
        extra_params: dict | None = ...,
        **kwargs,
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def gql_post(
        self,
        url: str,
        variables: dict,
        features: dict | None = ...,
        headers: dict | None = ...,
        extra_data: dict | None = ...,
        **kwargs,
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def search_timeline(
        self, query: str, product: str, count: int, cursor: str | None
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def similar_posts(
        self, tweet_id: str
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_tweet(
        self,
        is_note_tweet,
        text,
        media_entities,
        poll_uri,
        reply_to,
        attachment_url,
        community_id,
        share_with_followers,
        richtext_options,
        edit_tweet_id,
        limit_mode,
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_scheduled_tweet(self, scheduled_at, text, media_ids) -> str: ...
    async def delete_tweet(self, tweet_id):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_by_screen_name(
        self, screen_name
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_by_rest_id(
        self, user_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def tweet_detail(
        self, tweet_id, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def fetch_scheduled_tweets(self):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def delete_scheduled_tweet(
        self, tweet_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def tweet_engagements(
        self, tweet_id, count, cursor, endpoint
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def retweeters(
        self, tweet_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def favoriters(
        self, tweet_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def bird_watch_one_note(
        self, note_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_tweets(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_tweets_and_replies(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_media(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_likes(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_highlights_tweets(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def home_timeline(
        self, count, seen_tweet_ids, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def home_latest_timeline(
        self, count, seen_tweet_ids, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def favorite_tweet(
        self, tweet_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def unfavorite_tweet(
        self, tweet_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def retweet(self, tweet_id):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def delete_retweet(
        self, tweet_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_bookmark(
        self, tweet_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def bookmark_tweet_to_folder(
        self, tweet_id, folder_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def delete_bookmark(
        self, tweet_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def bookmarks(
        self, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def bookmark_folder_timeline(
        self, count, cursor, folder_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def delete_all_bookmarks(self):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def bookmark_folders_slice(
        self, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def edit_bookmark_folder(
        self, folder_id, name
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def delete_bookmark_folder(
        self, folder_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_bookmark_folder(
        self, name
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def followers(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def blue_verified_followers(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def followers_you_know(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def following(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_creator_subscriptions(
        self, user_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_dm_reaction_mutation_add_mutation(
        self, message_id, conversation_id, emoji
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_dm_reaction_mutation_remove_mutation(
        self, message_id, conversation_id, emoji
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def dm_message_delete_mutation(
        self, message_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def add_participants_mutation(
        self, group_id, user_ids
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_list(
        self, name, description, is_private
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def edit_list_banner(
        self, list_id, media_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def delete_list_banner(
        self, list_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def update_list(
        self, list_id, name, description, is_private
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def list_add_member(
        self, list_id, user_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def list_remove_member(
        self, list_id, user_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def list_management_pace_timeline(
        self, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def list_by_rest_id(
        self, list_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def list_latest_tweets_timeline(
        self, list_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def list_members(
        self, list_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def list_subscribers(
        self, list_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def search_community(
        self, query, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def community_query(
        self, community_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def community_media_timeline(
        self, community_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def community_tweets_timeline(
        self, community_id, ranking_mode, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def communities_main_page_timeline(
        self, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def join_community(
        self, community_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def leave_community(
        self, community_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def request_to_join_community(
        self, community_id, answer
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def members_slice_timeline_query(
        self, community_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def moderators_slice_timeline_query(
        self, community_id, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def community_tweet_search_module_query(
        self, community_id, query, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def tweet_results_by_rest_ids(
        self, tweet_ids
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def tweet_result_by_rest_id(
        self, tweet_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
