"""
This type stub file was generated by pyright.
"""

from typing import TYPE_CHECKING

from ..guest.client import GuestClient
from .client import Client

if TYPE_CHECKING:
    ClientType = Client | GuestClient

class Endpoint:
    GUEST_ACTIVATE = ...
    ONBOARDING_SSO_INIT = ...
    ACCOUNT_LOGOUT = ...
    ONBOARDING_TASK = ...
    SETTINGS = ...
    UPLOAD_MEDIA = ...
    UPLOAD_MEDIA_2 = ...
    CREATE_MEDIA_METADATA = ...
    CREATE_CARD = ...
    VOTE = ...
    REVERSE_GEOCODE = ...
    SEARCH_GEO = ...
    GET_PLACE = ...
    CREATE_FRIENDSHIPS = ...
    DESTROY_FRIENDSHIPS = ...
    CREATE_BLOCKS = ...
    DESTROY_BLOCKS = ...
    CREATE_MUTES = ...
    DESTROY_MUTES = ...
    GUIDE = ...
    AVAILABLE_TRENDS = ...
    PLACE_TRENDS = ...
    FOLLOWERS_LIST = ...
    FRIENDS_LIST = ...
    FOLLOWERS_IDS = ...
    FRIENDS_IDS = ...
    DM_NEW = ...
    DM_INBOX = ...
    DM_CONVERSATION = ...
    CONVERSATION_UPDATE_NAME = ...
    NOTIFICATIONS_ALL = ...
    NOTIFICATIONS_VERIFIED = ...
    NOTIFICATIONS_MENTIONS = ...
    LIVE_PIPELINE_EVENTS = ...
    LIVE_PIPELINE_UPDATE_SUBSCRIPTIONS = ...
    USER_STATE = ...

class V11Client:
    def __init__(self, base: ClientType) -> None: ...
    async def guest_activate(self):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def account_logout(self):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def onboarding_task(
        self, guest_token, token, subtask_inputs, data=..., **kwargs
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def sso_init(
        self, provider, guest_token
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def settings(self):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def upload_media(
        self, method, is_long_video: bool, *args, **kwargs
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def upload_media_init(
        self, media_type, total_bytes, media_category, is_long_video: bool
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def upload_media_append(
        self, is_long_video, media_id, segment_index, chunk_stream
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def upload_media_finelize(
        self, is_long_video, media_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def upload_media_status(
        self, is_long_video, media_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_media_metadata(
        self, media_id, alt_text, sensitive_warning
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_card(
        self, choices, duration_minutes
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def vote(
        self, selected_choice: str, card_uri: str, tweet_id: str, card_name: str
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def reverse_geocode(
        self, lat, long, accuracy, granularity, max_results
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def search_geo(
        self, lat, long, query, ip, granularity, max_results
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def get_place(self, id):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_friendships(
        self, user_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def destroy_friendships(
        self, user_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_blocks(self, user_id):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def destroy_blocks(
        self, user_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def create_mutes(self, user_id):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def destroy_mutes(self, user_id):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def guide(
        self, category, count, additional_request_params
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def available_trends(self):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def place_trends(self, woeid):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def followers_list(
        self, user_id, screen_name, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def friends_list(
        self, user_id, screen_name, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def followers_ids(
        self, user_id, screen_name, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def friends_ids(
        self, user_id, screen_name, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def dm_new(
        self, conversation_id, text, media_id, reply_to
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def dm_conversation(
        self, conversation_id, max_id
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def conversation_update_name(
        self, group_id, name
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def notifications_all(
        self, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def notifications_verified(
        self, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def notifications_mentions(
        self, count, cursor
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def live_pipeline_update_subscriptions(
        self, session, subscribe, unsubscribe
    ):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
    async def user_state(self):  # -> tuple[dict[Any, Any] | Any, Response]:
        ...
