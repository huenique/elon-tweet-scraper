"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from typing import TypedDict
from .account import Account
from .login import LoginConfig

class NoAccountError(Exception):
    ...


class AccountInfo(TypedDict):
    username: str
    logged_in: bool
    active: bool
    last_used: datetime | None
    total_req: int
    error_msg: str | None
    ...


def guess_delim(line: str): # -> str:
    ...

class AccountsPool:
    _order_by: str = ...
    def __init__(self, db_file=..., login_config: LoginConfig | None = ..., raise_when_no_account=...) -> None:
        ...
    
    async def load_from_file(self, filepath: str, line_format: str): # -> None:
        ...
    
    async def add_account(self, username: str, password: str, email: str, email_password: str, user_agent: str | None = ..., proxy: str | None = ..., cookies: str | None = ..., mfa_code: str | None = ...): # -> None:
        ...
    
    async def delete_accounts(self, usernames: str | list[str]): # -> None:
        ...
    
    async def delete_inactive(self): # -> None:
        ...
    
    async def get(self, username: str): # -> Account:
        ...
    
    async def get_all(self): # -> list[Account]:
        ...
    
    async def get_account(self, username: str): # -> Account | None:
        ...
    
    async def save(self, account: Account): # -> None:
        ...
    
    async def login(self, account: Account): # -> bool:
        ...
    
    async def login_all(self, usernames: list[str] | None = ...): # -> dict[str, int]:
        ...
    
    async def relogin(self, usernames: str | list[str]): # -> None:
        ...
    
    async def relogin_failed(self): # -> None:
        ...
    
    async def reset_locks(self): # -> None:
        ...
    
    async def set_active(self, username: str, active: bool): # -> None:
        ...
    
    async def lock_until(self, username: str, queue: str, unlock_at: int, req_count=...): # -> None:
        ...
    
    async def unlock(self, username: str, queue: str, req_count=...): # -> None:
        ...
    
    async def get_for_queue(self, queue: str): # -> Account | None:
        ...
    
    async def get_for_queue_or_wait(self, queue: str) -> Account | None:
        ...
    
    async def next_available_at(self, queue: str): # -> str | None:
        ...
    
    async def mark_inactive(self, username: str, error_msg: str | None): # -> None:
        ...
    
    async def stats(self): # -> dict[str, Any]:
        ...
    
    async def accounts_info(self): # -> list[AccountInfo]:
        ...
    


