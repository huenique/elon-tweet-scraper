"""
This type stub file was generated by pyright.
"""

from collections import defaultdict
from datetime import datetime
from typing import Any, AsyncGenerator, Callable, TypeVar

T = TypeVar("T")
class utc:
    @staticmethod
    def now() -> datetime:
        ...
    
    @staticmethod
    def from_iso(iso: str) -> datetime:
        ...
    
    @staticmethod
    def ts() -> int:
        ...
    


async def gather(gen: AsyncGenerator[T, None]) -> list[T]:
    ...

def encode_params(obj: dict): # -> dict[Any, Any]:
    ...

def get_or(obj: dict, key: str, default_value: T = ...) -> Any | T:
    ...

def int_or(obj: dict, key: str, default_value: int | None = ...): # -> int | None:
    ...

def get_by_path(obj: dict, key: str, default=...): # -> None:
    ...

def find_item(lst: list[T], fn: Callable[[T], bool]) -> T | None:
    ...

def find_or_fail(lst: list[T], fn: Callable[[T], bool]) -> T:
    ...

def find_obj(obj: dict, fn: Callable[[dict], bool]) -> Any | None:
    ...

def get_typed_object(obj: dict, res: defaultdict[str, list]): # -> defaultdict[str, list[Any]]:
    ...

def to_old_obj(obj: dict): # -> dict[Any, Any]:
    ...

def to_old_rep(obj: dict) -> dict[str, dict]:
    ...

def print_table(rows: list[dict], hr_after=...): # -> None:
    ...

def parse_cookies(val: str) -> dict[str, str]:
    ...

def get_env_bool(key: str, default_val: bool = ...) -> bool:
    ...

